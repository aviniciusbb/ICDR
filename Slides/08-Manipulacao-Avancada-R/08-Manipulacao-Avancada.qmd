---
format:
  revealjs: 
    theme: [default, custom.scss]
    footer: "[https://github.com/aviniciusbb/icdr/](https://github.com/aviniciusbb/icdr/)"
    slide-number: c/t
    code-link: true
    chalkboard: true
highlight-style: a11y
code-link: true
engine: knitr
from: markdown+emoji
height: 900
width: 1600
execute: 
  eval: true
  echo: true
editor: source  
---


<h1><font color="1b5299"> Introdução à Ciência de Dados no `R`
</font></h1>

<hr>

<h2><font color="736f72"> Aula 08 </font> - Manipulação Avançada </h2>

<h2><font color="FFFFFF"> Aula 08 </font></h2>

<h2>

Antonio Vinícius Barbosa

<h2>

<h3>`r format(Sys.time(), "%d-%m-%Y")`</h3>

<br>

<h3>

![](https://www.newsasset.com/Files/Homepage/Content/section01-cube.png){.absolute top="400" left="1150" width="400"}

# <font color="1b5299"> Formatando Dados </font> {background-color="#BBDEF0"}

## Manipulação de Dados

Nesta parte, veremos mais alguns pacotes importantes para a manipulação de dados no 
`R`:

- `lubridate`: pacote para manipular variáveis contendo datas.
- `stringr`: manipulação de variáveis de texto (*characters* ou *strings*).
- `forcats`: manipulação de fatores.

![](Images/datar.png){fig-align="center" width="350"}  



# <font color="1b5299"> Manipulando datas </font> {background-color="#BBDEF0"}


## Manipulando datas no `R`

Em muitas situações, é necessário manipular informações que contêm **datas** a fim de capturar, por exemplo, o intervalo de tempo entre dois eventos ou a dinâmica temporal de uma variável.  



O pacote `lubridate` possui diversas funções que facilitam a manipulação de datas.

![](Images/lubridate.jpg){fig-align="center" width="400"}  

Foi criado por Garrett Grolemund e Hadley Wickham e faz parte
do conjunto de pacotes do `tidyverse`. Ver [documentação oficial](https://lubridate.tidyverse.org/).


## {background-image="https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/3017cf57-d7d9-4f73-9b66-f2be0ebf2489_rw_1920.png?h=2cdd179bc087c56b43f8aa6ea849ca1a" background-size="cover"}


## Manipulando datas no `R`

Nesta seção, veremos como:

:::{.incremental}
- Transformar e extrair datas
- Aprender funções básicas para a manipulação de datas
- Realizar operações com datas
:::


## A classe `Date`

Variáveis que contêm datas são tratadas como um tipo especial de objeto, 
da classe `Date`. Para criar um objeto dessa classe, fazemos:


```{r, echo = TRUE, collapse = TRUE}
# Criar data
data_char <- c("31/12/2021", "01/01/2022")
class(data_char)

# Usando a funcao as.Date()
data_date <- as.Date(data_char)
class(data_date)
data_date
```


. . .

A função `as.Date()` transforma objetos na classe `Date`, porém com um valor inesperado. 
Tal função se ajusta apenas para datas do tipo `yyyy-mm-dd`.


## O pacote `lubridate`

Para lidar com datas do tipo `dd-mm-yyyy`, o pacote `lubridate` oferece a 
função `dmy()` (**d**ay, **m**onth, **y**ear):

```{r, echo = FALSE, collapse = TRUE}
library(tidyverse)
```

```{r, echo = TRUE, collapse = TRUE}
# Criar data
data_char <- c("31/12/2021", "01/01/2022")

# Usando a funcao dmy()
data <- dmy(data_char)
class(data)
data
```


Para os demais ordenações de datas, o pacote oferece as variações `dym()`, `mdy()`,  
`myd()`,  `ymd()` e `ydm()`.


## Formatos de datas ao redor do mundo

![](https://vividmaps.com/wp-content/uploads/2021/03/date-format-by-country.png){fig-align="center" width="400"}  


## O pacote `lubridate`

Podemos transformar diversos formatos para a classe `Date`:


```{r, echo = TRUE, collapse = TRUE}
# Datas com diferentes formatos
dmy(31122019) # numerico
dmy("31122019") # character
dmy("31/12/2019") # separado por "/"
dmy("31.12.2019") # separado por "."
```

## 

![](Images/meme_date_format.jpeg){fig-align="center" width="400"}  


## O pacote `lubridate`

Além de datas, podemos adicionar as horas. Para isso, basta identificar a ordem
do *year*(`y`), *month*(`m`), *day*(`d`), *hour*(`h`), *minute*(`m`) e *second*(`s`)


```{r, echo = TRUE, collapse = TRUE}
# Datas e horarios
ymd_h("2020020515")
ymd_hm("202002051531")
ymd_hms("20200205153140")
```


## O pacote `lubridate`

Para extrair informações instantâneas do sistema, fazemos:

```{r, echo = TRUE, collapse = TRUE}
# Data atual
today()
now()
```


O último bloco de informações da função `now()` corresponde ao [fuso horário](https://pt.wikipedia.org/wiki/Fuso_hor%C3%A1rio).

## O pacote `lubridate`

Há diversas funções para extrair informações de um objeto da classe `Date`:


```{r, echo = TRUE, collapse = TRUE}
hora_atual <- now()
hora_atual
```


```{r, echo = TRUE, collapse = TRUE}
# Extrair data
date(hora_atual)
# Extrair ano
year(hora_atual)
# Extrair mes
month(hora_atual)
# Extrair dia do mes
day(hora_atual)
# Extrair hora
hour(hora_atual)
# Extrair minutos
minute(hora_atual)
# Extrair segundos
second(hora_atual)
```



## O pacote `lubridate`

Outras informações de um objeto da classe `Date`:


```{r, echo = TRUE, collapse = TRUE}
# Extrair dia da semana
wday(hora_atual, label = TRUE)
```

Outras informações:

![](Images/dates.png){fig-align="center" width="400"}  


## Operações com datas

Intervalos de datas são realizados areavés da função `interval()`


```{r, echo = TRUE, collapse = TRUE}
# Datas
data_inic <- ymd("2023-04-08")
data_fim <- ymd("2023-06-16")

# Intervalo de datas
periodo <- interval(data_inic, data_fim)
periodo

# Outra notação (operador intervalo %--%)
periodo <- data_inic %--% data_fim
periodo

evento <- ymd("2023-12-10")
evento %within% periodo
```


## Operações com datas

Algumas operações aritméticas disponíveis são:


```{r, echo = TRUE, collapse = TRUE}
# Adição de datas
today() + days(10)
today() + years(2)
# Datas recorrentes
aulas <- today() + weeks(1:2) 
aulas
# Diferença de datas
as.period(periodo); as.period(periodo, unit = "day")
```

## Datas em `R`

- Outras classes de datas no R são `POSIXct` e `POSIXlt`.
- A classe `POSIXct` é útil para datas que contenham horas.
- A classe `POSIXlt` facilita a extração de componentes da data.
- O pacote `lubridate` é um *wrapper* para manipular as duas classes, 
  com uma sintaxe mais simples e intuitiva.
- Para mais informações, ver a ajuda das funções [https://lubridate.tidyverse.org](https://lubridate.tidyverse.org)
  



## Quizz #1 {.inverse background-color="#386FA4"}

1. Utilize a função do `lubridate` apropriada para analisar cada uma das seguintes datas:


```{r, echo = TRUE, collapse = TRUE}
d1 <- "January 20, 2020"
d2 <- "2020-Abril-01"
d3 <- "11-Nov-2020"
d4 <- c("July 13 (1969)", "August 23 (1972)", "July 1 (1975)")
d5 <- "2008/13/10" 
```


2. Precisamente, qual a sua idade agora? Calcule a idade em anos, meses, semanas, dias, horas e minutos.


## Quizz #2 {.inverse background-color="#386FA4"}

Para este exercício, será necessário utilizar a base `dados::voos`

1. Observar a estrutura de dados utilizando `glimpse()`.
2. Criar uma variável informando a velocidade média (km/h) do voo utilizando as
variáveis `distancia` e `tempo_voo` (*medida em minutos*).
4. Construa a variável com a data e hora exata da decolagem.
5. Reporte a hora de chegada relativa ao local de partida.
6. Criar um banco apenas com dados dos voos atrasados.


# <font color="1b5299"> Strings (ou *variáveis de texto*) </font> {background-color="#BBDEF0"}


## Variáveis de texto

- Outra classe importante são as variáveis *character* (ou *strings*).
- Muitas vezes, é difícil manipular *strings* devido a existência de
  diversas funções com diferentes argumentos.
- Neste sentido, o pacote `stringr` traz uma sintaxe mais consistente
  e simples para manipular tais variáveis.

![](https://stringr.tidyverse.org/logo.png){fig-align="center" width="400"}  


## As funções do `stringr`

```{r, echo = TRUE, collapse = TRUE, eval = FALSE}
# Instalar e carregar pacote 
install.packages("stringr")
library(stringr)
```

- O pacote também faz parte do `tidyverse`
- As funções de manipulação de texto começam com `str_`
- Para listar todas as funções disponíveis, basta digitar `stringr::str_` e visualizar
  todas as funções com este prefixo


## As funções do `stringr`

Algumas funções básicas para manipulação de caracteres:

```{r, echo = FALSE, collapse = TRUE}
library(stringr)
```

```{r, echo = TRUE, collapse = TRUE}
# Numero de caracteres
str_length("João Pessoa")

# Minusculas
str_to_lower("João Pessoa")

# Maiusculas
str_to_upper("João Pessoa")

# Iniciais maiusculas
str_to_title("joão pessoa")
```  

## As funções do `stringr`

```{r, echo = TRUE, collapse = TRUE}
# Extrair por posicao
str_sub("João Pessoa", start = 1, end = 4)

# Extrair por padrao
cidades <- c("Sapé", "Sumé", "Cuité", "Santa Rita")

# Detectar
str_detect(cidades, "Sa")

# Subconjunto
str_subset(cidades, "Sa")
```
  

## As funções do `stringr`

```{r, echo = TRUE, collapse = TRUE}
# Variavel sexo
sexo_quest <- c("M", "F", " M", "F ", " M ")
sexo_quest

# Remover espacos em branco
sexo <- str_trim(sexo_quest)
sexo

# Remover espacos em branco em qualquer parte
str_squish("  Este   texto está   com espaços  ")

# Concatenar strings
pre <- "O status é:"
status <- "APROVADO"
str_c(pre, status, sep = " ")

# Excluir padrões
id_var <- c("id1", "id2", "id3")
str_replace(id_var, "id", "")
```  


## As funções do `stringr`

Para dividir elementos de uma string baseada em um caractere específico, utilizamos 
a função `str_split()`:


```{r, echo = TRUE, collapse = TRUE}
# Inserir texto
texto <- c("Lorem ipsum dolor sit amet")

# Dividir string (em lista)
str_split(texto, " ")

# Dividir string (em matriz)
str_split(texto, " ", simplify = TRUE)
```


## As funções do `stringr`

Para adicionar caracteres e ajustar em um tamanho fixo, utilizamos a função 
`str_pad()`

```{r, echo = TRUE, collapse = TRUE}
# CNPJ numerico
cnpj_bb <- 00000000000191
cnpj_bb

# Ajustar CNPJ
str_pad(cnpj_bb, width = 14, side = "left", pad = 0)
```


## Documentação oficial

- [Vignette](https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html)
- [Cheat Sheet](http://edrub.in/CheatSheets/cheatSheetStringr.pdf)


![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6bbcc35c-1863-49df-8204-d981303d8cd3_rw_1920.png?h=cef2364d9766f60c5abac6b454d561a2){fig-align="center" width="400"}  

## Quizz #3 {.inverse background-color="#386FA4"}

### **Exercício 1**

O CPF é um número composto por 11 dígitos. Por exemplo, 54491651884. No entanto, para facilitar a 
visualização, costumamos mostrá-lo com separadores a cada 3 casas: 544.916.518-84. Como obter esse padrão
utilizando unicamente as funções do pacote `stringr`?


### **Exercício 2**

Suponha que tenhamos o seguinte endereço em uma URL:
`https://www.ibge.gov.br/cidades-e-estados/pb/campina-grande.html`
Transforme o endereço no formato identificador **Campina Grande (PB)**



# <font color="1b5299"> O pacote `forcats` </font> {background-color="#BBDEF0"}



## Fatores

Até o momento, vimos a existência de objetos da classe `factor`. De forma geral:


- Representam uma forma prática de lidar com variáveis categorizadas, 
tanto para fins de modelagem quanto para fins de visualização.


![](https://forcats.tidyverse.org/logo.png){fig-align="center" width="400"}  



## Fatores

- As principais funções do pacote `forcats` auxiliam na reordenação das categorias
e na modificação dos níveis de um fator.


- Fatores são estruturas de dados utilizadas para ordenar strings. Formalmente, um fator é 
definido como um vetor de `integers` com dois atributos específicos:
  - **levels**: vetor de strings que indica a relação de ordem entre as variáveis.
  - **class**: a string atômica `factor`.



## Variáveis categóricas

Suponha um vetor com as disciplinas preferidas dos alunos em uma dado semestre:

```{r, echo = TRUE, collapse = TRUE}
disciplinas <- c("micro", "macro", "econometria", "macro", 
                 "micro", "brasileira", "macro", "econometria", 
                 "micro", "brasileira", "macro", "micro")
class(disciplinas)
```

. . .

Para transformar o objeto em fator, fazemos:

```{r, echo = TRUE, collapse = TRUE}
disciplinas <- factor(disciplinas)
class(disciplinas)
str(disciplinas)
levels(disciplinas)
```

## Variáveis categóricas

Fatores são estruturas úteis que permitem ter maior controle durante a análise dos dados: 

```{r, echo = TRUE, collapse = TRUE}
disciplinas <- factor(disciplinas, 
                      levels = c("micro","macro", "econometria", 
                                 "brasileira"))
str(disciplinas)
levels(disciplinas)
```


## O pacote `forcats`

Para entender as funcionalidades do pacote `forcats`, utilizaremos o banco de dados
`airquality`:

```{r, echo = TRUE, collapse = TRUE}
tibble::glimpse(airquality)
```


## O pacote `forcats`

Estamos interessados em mudar os níveis de um fator: 

```{r, echo = TRUE, collapse = TRUE}
airquality$Month <- as.factor(airquality$Month)
levels(airquality$Month)
```


Podemos renomear os `levels` através da função `fct_recode()`:


```{r, echo = TRUE, collapse = TRUE}
airquality$Month <- fct_recode(airquality$Month, 
                               "Mai" = "5", "Jun" = "6", 
                               "Jul" = "7", "Ago" = "8", 
                               "Set" = "9")
levels(airquality$Month)
```


## O pacote `forcats`

É possível mudar a ordem em que os `levels` são apresentados:


```{r, echo = TRUE, collapse = TRUE}
airquality$Month <- fct_relevel(airquality$Month, 
                                'Jul', 'Ago', 'Jun', 
                                'Set', 'Mai')
levels(airquality$Month)
```


## O pacote `forcats`

Outra função bastante útil para agrupar categorias é a `fct_lump`. Considere o seguinte vetor:

```{r, echo = TRUE, collapse = TRUE}
letras <- factor(sample(letters[1:10], 100, replace = TRUE))
fct_count(letras)
```


## O pacote `forcats`

A função `fct_lump()` utiliza o level de menor frequência e categoriza como "Outros" 

```{r, echo = TRUE, collapse = TRUE}
fct_lump(letras, other_level = "Outros") |>        
  fct_count()
```


## O pacote `forcats`

Ainda, podemos definir o número de categorias e agregar as demais em  "Outros" 

```{r, echo = TRUE, collapse = TRUE}
fct_lump(letras, n = 4, other_level = "Outros") |>        
  fct_count()
```

